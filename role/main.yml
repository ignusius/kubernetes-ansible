---
- name: kubernetes setup
  hosts: all

#  vars_files:
#    - ../group_vars/domain.com.yml
#    - ../group_vars/global.vars.yml
  vars:
    dockerinstall: 0

  tasks:

  - name: Install packages to allow apt to use a repository over HTTPS
    apt: name={{item}} state=installed
    with_items:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
    when: ansible_distribution == 'Ubuntu' and dockerinstall == 1
    become: yes
  - name: Add docker repo key
    apt_key: url="https://download.docker.com/linux/ubuntu/gpg" state=present
    when: ansible_distribution == 'Ubuntu' and dockerinstall == 1
    become: yes
  - name: Add docker repo
    apt_repository: repo='deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable' state=present
    when: ansible_distribution == 'Ubuntu' and dockerinstall == 1
    become: yes
  - name: docker-ce docker-ce-cli
    apt:
      name: docker-ce=18.06.0~ce~3-0~ubuntu
      state: installed
    when: ansible_distribution == 'Ubuntu' and dockerinstall == 1
    become: yes
  - name: Install docker-compose
    get_url:
      url: https://github.com/docker/compose/releases/download/1.22.0-rc1/docker-compose-Linux-x86_64
      dest: /usr/local/bin/docker-compose
      mode: 0770
    when: ansible_distribution == 'Ubuntu' and dockerinstall == 1
    become: yes

#  - name: Remove swapfile from /etc/fstab
#    lineinfile:
#      dest: /etc/fstab
#      regexp: '^/swap.img'
#      state: absent
#    become: yes
#  - name: Disable swap
#    command: swapoff -a
#    become: yes

#  - name: install dependences Ubuntu
#    apt: name=apt-transport-https state=installed
#    when: ansible_distribution == 'Ubuntu'
#    become: yes

#  - name: Add an Apt signing key for Ubuntu
#    apt_key:
#      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
#      state: present
#    when: ansible_distribution == 'Ubuntu'
#    become: yes
#  - name: Add an Rpm signing key for Centos
#    rpm_key:
#      state: present
#      key: https://packages.cloud.google.com/yum/doc/yum-key.gpg
#    when: ansible_distribution == 'CentOS'
#    become: yes

#  - name: Add kubernetes repo for Ubuntu
#    apt_repository:
#      repo: "deb http://apt.kubernetes.io/ kubernetes-xenial main"
#    when: ansible_distribution == 'Ubuntu'
#    become: yes
#  - name: Add Kubernetes repo for Centos
#    yum_repository:
#      name: kubernetes
#      description: kubernetes repo
#      file: kubernetes.repo
#      baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
##      enabled: yes
#      gpgcheck: no
#    when: ansible_distribution == 'CentOS'
#    become: yes

#  - name: Install Kubernetes Ubuntu
#    apt: name={{item}} state=installed
#    with_items:
#      - kubelet
#      - kubeadm
#      - kubernetes-cni
#    when: ansible_distribution == 'Ubuntu'
#    become: yes
#  - name: Install Kubernetes Centos
#    yum: name={{item}} state=installed
#    with_items:
#      - kubelet
#      - kubeadm
#      - kubectl
#    when: ansible_distribution == 'CentOS'
#    become: yes

#  - name: Initialize k8s
#    command: kubeadm init --pod-network-cidr=10.244.0.0/16
#    when: "'masters' in group_names "
#    become: yes

#  - name: Get Kubernetes join token
#    command: kubeadm token create --print-join-command
#    register: join_token
#    when: ansible_hostname == 'k1'
##    when: "'k1' in group_names "
#    become: yes

#  - name: Print Token
#    debug:
#      var: join_token.stdout_lines

#  - name: test
#    debug: msg="{{ hostvars['']['ansible_hostname'] }}"
#    debug: var=hostvars['192.168.27.177'].join_token.stdout
#    when: "'node' in group_names "
#    become: yes

#  - name: Join new nodes
#    lineinfile:
#      dest: /tmp/test
#      create: yes
#      line: "{{ hostvars['192.168.27.177'].join_token.stdout }}"
#      state: present
#    when: "'nodes' in group_names "
#    become: yes

#  - name: Join machines
#    command: "{{ hostvars['192.168.27.177'].join_token.stdout }}"
#    when: "'nodes' in group_names "
#    become: yes

#  - name: Add user kube
#    user:
#      name: kube
#      shell: /bin/bash
#      groups: sudo
#      password: $6$fGkF5fV7W$auo0o9NaeKDtcZzwJTT2lr2dDGRHU1PvgnRffRwh8wpE2NSmoBI5PNfrK.GD930f01Vb5oX68IfW2lTBxBSAn0
#    become: yes
#    when: ansible_distribution == 'Ubuntu' and "'master' in group_names "
## mkpasswd --method=sha-512
## password is Qwerty123
#  - name: Creates .kube directory in homedir
#    file:
#      state: directory
#      path: /home/kube/.kube
#      mode: 0644
#      owner: kube
#      group: kube
#    when: ansible_hostname == 'k1'
#    become: yes
##    when: "'master' in group_names "
#  - name: Copy config file to new user dir
#    copy:
#      src: /etc/kubernetes/admin.conf
#      dest: /home/kube/.kube/config
#      remote_src: yes
#      owner: kube
#      group: kube
#      mode: 0644
#    when: ansible_hostname == 'k1'
#    become: yes
##    when: "'master' in group_names "
#  - name: Add path to config to bashrc
#    lineinfile:
#      dest: /home/kube/.bashrc
#      line: "export KUBECONFIG=$HOME/.kube/config"
#      state: present
#    when: ansible_hostname == 'k1'
#    become: yes


#  - name: Some
#    command: kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default
#    when: ansible_hostname == 'k1'
#    become: yes
#    become_user: kube
#  - name: Install flannel
#    command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
#    when: ansible_hostname == 'k1'
#    become: yes
#    become_user: kube

#  - name: Install Kubernetes Dashboard
#    command: kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
#    when: ansible_hostname == 'k1'
#    become: yes
#    become_user: kube
#  - name: Create user for Dashboard
#    blockinfile:
#      dest: /home/kube/.kube/account.yaml
#      create: yes
#      block: |
#          apiVersion: v1
#          kind: ServiceAccount
#          metadata:
#            name: admin-user
#            namespace: kube-system
#          ---
#          apiVersion: rbac.authorization.k8s.io/v1beta1
#          kind: ClusterRoleBinding
#          metadata:
#            name: admin-user
#          roleRef:
#            apiGroup: rbac.authorization.k8s.io
#            kind: ClusterRole
#            name: cluster-admin
#          subjects:
#          - kind: ServiceAccount
#            name: admin-user
#            namespace: kube-system
#      marker: ''
#    when: ansible_hostname == 'k1'
#    become: yes
#    become_user: kube
  - name: Apply the full admin privileges to dashboard service account using the dashboard-admin YAML file
    command: kubectl -n kube-system create -f /home/kube/.kube/account.yaml
    become: yes
    become_user: kube

#  - name: Install ceph
#    apt: name={{item}} state=installed update_cache=yes
#    with_items:
#      - ceph-deploy
#      - ceph-common
#    become: true